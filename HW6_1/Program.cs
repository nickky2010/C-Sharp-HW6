//                                                  Задание 1.
//  Предприятие оказывает клиентам услуги по снабжению энергией.Расчёты за потреблённую энергию осуществляются ежемесячно.
//  Клиенты предприятия делятся на четыре вида, каждый из которых имеет свой алгоритм вычисления стоимости потреблённой энергии:
//      1.	Обычные – стоимость потреблённой энергии прямо пропорциональна потреблённой энергии.Одна единица потреблённой энергии стоит 15 коп.
//      2.	С лимитом  – первые 150 единиц энергии клиент получает по цене, как для обычных клиентов (15 коп.), 
//  а всё, что потреблено сверх 150 единиц, оплачивается по тарифу на ⅓ больше(20 коп.)
//      3.	Льготные №1 – стоимость потреблённой энергии прямо пропорциональна потреблённой энергии, 
//  но применяется льготный тариф, который составляет ⅔ от тарифа для обычных клиентов(10 коп.)
//      4.	Льготные №2 – клиенты получают первые 50 единиц энергии бесплатно, а всё, что потреблено сверх этих 50 единиц 
//  оплачивают по тарифу как для обычных клиентов(15 коп.).
//  Разработать консольную программу, в которой создать массив из данных о потреблённой клиентами энергией за один месяц.
//  В массиве должно быть данные о минимум трёх клиентах каждого вида.Объём потреблённой каждым клиентом энергии 
//  должен быть введён в программу с использованием константных значений(программа не должна запрашивать ввод данных с консоли).

//  Выполнить следующую обработку хранящихся в массиве данных и вывести результаты выполнения каждого шага на консоль:
//      1.	Отсортировать массив по количеству потреблённой клиентами энергии по убыванию.
//      2.	Отсортировать массив по величине оплаты клиентами по возрастанию.
//      3.	Упорядочить массив по типу клиентов (первыми – обычные, затем – с лимитом, затем – льготные №1 и последними – льготные №2)
//      4.	Вычислить общую сумму SUM оплаты всех клиентов за потреблённую энергию.
//      5.	Вычислить общий размер льготы LG= SUM0–SUM. Где SUM0 – общая сумма оплаты всех клиентов за потребленную энергию, 
//  если бы они все были обычными (без льгот и лимитов).

using HW6_1.Clients;
using HW6_1.Tarifs;
using System;

namespace HW6_1
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                Tariff[] tariffs = {
                    new Tariff(),
                    new LimitTariff(),
                    new PreferentialTariffOne (),
                    new PreferentialTariffTwo ()
                };
                Client[] clients = {
                    new ClientOrdinary("Ужиков Е.Е.", "Кирова 43", tariffs[0], 200),
                    new ClientOrdinary("Петров В.В.", "Советская 133/7", tariffs[0], 300),
                    new ClientOrdinary("Чижиков В.Ф.","Ватрушкина 2/4", tariffs[0], 100),
                    new ClientLimit ("Иванов А.А.", "Юбилейная 8/56", tariffs[1], 100),
                    new ClientLimit ("Пыжиков Е.В.", "Советская 133/7", tariffs[1], 200),
                    new ClientLimit ("Сидоров А.А.", "Междугородняя 8/33", tariffs[1], 300),
                    new ClientPreferentialOne("ОАО \"Химзавод\"", "Химзаводская 5", tariffs[2], 140000),
                    new ClientPreferentialOne("КУП \"ГОРЭЛЕКТРОТРАНСПОРТ\"", "Троллейбусная 1", tariffs[2], 150000),
                    new ClientPreferentialOne("ОАО \"Гомсельмаш\"", "Шоссейная 41", tariffs[2], 155000),
                    new ClientPreferentialTwo ("СОАО \"Гомелькабель\"","Советская 151", tariffs[3], 40000),
                    new ClientPreferentialTwo ("Чижиков В.Е.", "Барыкина 54/16", tariffs[3], 305),
                    new ClientPreferentialTwo ("ОАО \"Электроаппаратура\"", "Советская 157", tariffs[3], 10000),
                };
                ClientCollection.Show("Потребители электроэнергии:", "№", 3, "Имя клиента", 29, "Адрес клиента", 20, "Тип клиента", 15, 
                    "Объем потребленной энергии,кВт/ч", 15, "Стоимость", 13, clients);
                //  1.	Отсортировать массив по количеству потреблённой клиентами энергии по убыванию.
                Array.Sort(clients, ClientComparer.CompareByEnergyVolumeBack);
                ClientCollection.Show("Cортировка по количеству потреблённой клиентами энергии по убыванию","№", 3, "Имя клиента", 29, 
                    "Адрес клиента", 20, "Тип клиента", 15, "Объем потребленной энергии,кВт/ч", 15, "Стоимость", 13, clients);
                //  2.	Отсортировать массив по величине оплаты клиентами по возрастанию.
                Array.Sort(clients, ClientComparer.CompareByEnergyPayment);
                ClientCollection.Show("Cортировка по величине оплаты клиентами по возрастанию", "№", 3, "Имя клиента", 29, 
                    "Адрес клиента", 20, "Тип клиента", 15, "Объем потребленной энергии,кВт/ч", 15, "Стоимость", 13, clients);
                //  3.	Упорядочить массив по типу клиентов (первыми – обычные, затем – с лимитом, затем – льготные №1 и последними – льготные №2)
                ClientComparer clientComparer = new ClientComparer();
                Array.Sort(clients, clientComparer.Compare);
                ClientCollection.Show("Cортировка по типу клиентов (первыми – обычные, затем – с лимитом, затем – льготные №1 и последними – льготные №2)",
                    "№", 3, "Имя клиента", 29, "Адрес клиента", 20, "Тип клиента", 15,"Объем потребленной энергии,кВт/ч", 15, "Стоимость", 13, clients);
                //  4.	Вычислить общую сумму SUM оплаты всех клиентов за потреблённую энергию.
                Console.WriteLine("Общая сумма оплаты всех клиентов за потреблённую энергию: "+ClientCollection.SumPayment(clients));
                //  5.	Вычислить общий размер льготы LG= SUM0–SUM. Где SUM0 – общая сумма оплаты всех клиентов за потребленную энергию, 
                //  если бы они все были обычными (без льгот и лимитов).
                decimal lg = ClientCollection.SumConcession(clients);
                if (lg<=0)
                    Console.WriteLine("Льготы отсутствуют. Общий размер переплат составил: "+ Math.Abs(lg));
                else 
                    Console.WriteLine("Общий размер льготы: " + lg);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            Console.ReadKey();
        }
    }
}
